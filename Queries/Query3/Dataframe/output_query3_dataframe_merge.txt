== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- SortMergeJoin [knownfloatingpointnormalized(normalizenanandzero(LAT#43)), knownfloatingpointnormalized(normalizenanandzero(LON#44))], [knownfloatingpointnormalized(normalizenanandzero(LAT#288)), knownfloatingpointnormalized(normalizenanandzero(LON#289))], Inner
   :- Sort [knownfloatingpointnormalized(normalizenanandzero(LAT#43)) ASC NULLS FIRST, knownfloatingpointnormalized(normalizenanandzero(LON#44)) ASC NULLS FIRST], false, 0
   :  +- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#43)), knownfloatingpointnormalized(normalizenanandzero(LON#44)), 200), ENSURE_REQUIREMENTS, [plan_id=78]
   :     +- Project [DR_NO#17, cast(gettimestamp(Date Rptd#18, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date) AS Date Rptd#73, cast(gettimestamp(DATE OCC#19, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date) AS DATE OCC#103, TIME OCC#20, AREA #21, AREA NAME#22, Rpt Dist No#23, Part 1-2#24, Crm Cd#25, Crm Cd Desc#26, Mocodes#27, Vict Age#28, Vict Sex#29, CASE WHEN (Vict Descent#30 = A) THEN Other Asian WHEN (Vict Descent#30 = B) THEN Black WHEN (Vict Descent#30 = C) THEN Chinese WHEN (Vict Descent#30 = D) THEN Cambodian WHEN (Vict Descent#30 = F) THEN Filipino WHEN (Vict Descent#30 = G) THEN Guamanian WHEN (Vict Descent#30 = H) THEN Hispanic/Latin/Mexican WHEN (Vict Descent#30 = I) THEN American Indian/Alaskan Native WHEN (Vict Descent#30 = J) THEN Japanese WHEN (Vict Descent#30 = K) THEN Korean WHEN (Vict Descent#30 = L) THEN Laotian WHEN (Vict Descent#30 = O) THEN Other WHEN (Vict Descent#30 = P) THEN Pacific Islander WHEN (Vict Descent#30 = S) THEN Samoan WHEN (Vict Descent#30 = U) THEN Hawaiian WHEN (Vict Descent#30 = V) THEN Vietnamese WHEN (Vict Descent#30 = W) THEN White WHEN (Vict Descent#30 = X) THEN Unknown WHEN (Vict Descent#30 = Z) THEN Asian Indian END AS Vict Descent#219, Premis Cd#31, Premis Desc#32, Weapon Used Cd#33, Weapon Desc#34, Status#35, Status Desc#36, Crm Cd 1#37, Crm Cd 2#38, Crm Cd 3#39, Crm Cd 4#40, ... 4 more fields]
   :        +- Filter ((((year(cast(gettimestamp(DATE OCC#19, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#30)) AND isnotnull(LAT#43)) AND isnotnull(LON#44))
   :           +- FileScan csv [DR_NO#17,Date Rptd#18,DATE OCC#19,TIME OCC#20,AREA #21,AREA NAME#22,Rpt Dist No#23,Part 1-2#24,Crm Cd#25,Crm Cd Desc#26,Mocodes#27,Vict Age#28,Vict Sex#29,Vict Descent#30,Premis Cd#31,Premis Desc#32,Weapon Used Cd#33,Weapon Desc#34,Status#35,Status Desc#36,Crm Cd 1#37,Crm Cd 2#38,Crm Cd 3#39,Crm Cd 4#40,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#19, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/Crime_Data_from_2010_to_2019.csv], PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:int,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA :int,AREA NAME:string,Rpt Dis...
   +- Sort [knownfloatingpointnormalized(normalizenanandzero(LAT#288)) ASC NULLS FIRST, knownfloatingpointnormalized(normalizenanandzero(LON#289)) ASC NULLS FIRST], false, 0
      +- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#288)), knownfloatingpointnormalized(normalizenanandzero(LON#289)), 200), ENSURE_REQUIREMENTS, [plan_id=79]
         +- Project [LAT#288, LON#289, cast(regexp_extract(ZIPcode#290, (\d+), 1) as int) AS ZIPcode#294]
            +- Filter (isnotnull(LAT#288) AND isnotnull(LON#289))
               +- FileScan csv [LAT#288,LON#289,ZIPcode#290] Batched: false, DataFilters: [isnotnull(LAT#288), isnotnull(LON#289)], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/revgecoding.csv], PartitionFilters: [], PushedFilters: [IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<LAT:double,LON:double,ZIPcode:string>


Highest 3
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#483L DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(count#483L DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=160]
      +- HashAggregate(keys=[Vict Descent#219], functions=[count(1)])
         +- Exchange hashpartitioning(Vict Descent#219, 200), ENSURE_REQUIREMENTS, [plan_id=157]
            +- HashAggregate(keys=[Vict Descent#219], functions=[partial_count(1)])
               +- Project [Vict Descent#219]
                  +- SortMergeJoin [ZIPcode#294], [Zip Code#265], Inner
                     :- Sort [ZIPcode#294 ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(ZIPcode#294, 200), ENSURE_REQUIREMENTS, [plan_id=149]
                     :     +- Project [Vict Descent#219, ZIPcode#294]
                     :        +- SortMergeJoin [knownfloatingpointnormalized(normalizenanandzero(LAT#43)), knownfloatingpointnormalized(normalizenanandzero(LON#44))], [knownfloatingpointnormalized(normalizenanandzero(LAT#288)), knownfloatingpointnormalized(normalizenanandzero(LON#289))], Inner
                     :           :- Sort [knownfloatingpointnormalized(normalizenanandzero(LAT#43)) ASC NULLS FIRST, knownfloatingpointnormalized(normalizenanandzero(LON#44)) ASC NULLS FIRST], false, 0
                     :           :  +- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#43)), knownfloatingpointnormalized(normalizenanandzero(LON#44)), 200), ENSURE_REQUIREMENTS, [plan_id=141]
                     :           :     +- Project [CASE WHEN (Vict Descent#30 = A) THEN Other Asian WHEN (Vict Descent#30 = B) THEN Black WHEN (Vict Descent#30 = C) THEN Chinese WHEN (Vict Descent#30 = D) THEN Cambodian WHEN (Vict Descent#30 = F) THEN Filipino WHEN (Vict Descent#30 = G) THEN Guamanian WHEN (Vict Descent#30 = H) THEN Hispanic/Latin/Mexican WHEN (Vict Descent#30 = I) THEN American Indian/Alaskan Native WHEN (Vict Descent#30 = J) THEN Japanese WHEN (Vict Descent#30 = K) THEN Korean WHEN (Vict Descent#30 = L) THEN Laotian WHEN (Vict Descent#30 = O) THEN Other WHEN (Vict Descent#30 = P) THEN Pacific Islander WHEN (Vict Descent#30 = S) THEN Samoan WHEN (Vict Descent#30 = U) THEN Hawaiian WHEN (Vict Descent#30 = V) THEN Vietnamese WHEN (Vict Descent#30 = W) THEN White WHEN (Vict Descent#30 = X) THEN Unknown WHEN (Vict Descent#30 = Z) THEN Asian Indian END AS Vict Descent#219, LAT#43, LON#44]
                     :           :        +- Filter ((((year(cast(gettimestamp(DATE OCC#19, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#30)) AND isnotnull(LAT#43)) AND isnotnull(LON#44))
                     :           :           +- FileScan csv [DATE OCC#19,Vict Descent#30,LAT#43,LON#44] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#19, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/Crime_Data_from_2010_to_2019.csv], PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DATE OCC:string,Vict Descent:string,LAT:double,LON:double>
                     :           +- Sort [knownfloatingpointnormalized(normalizenanandzero(LAT#288)) ASC NULLS FIRST, knownfloatingpointnormalized(normalizenanandzero(LON#289)) ASC NULLS FIRST], false, 0
                     :              +- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#288)), knownfloatingpointnormalized(normalizenanandzero(LON#289)), 200), ENSURE_REQUIREMENTS, [plan_id=142]
                     :                 +- Project [LAT#288, LON#289, cast(regexp_extract(ZIPcode#290, (\d+), 1) as int) AS ZIPcode#294]
                     :                    +- Filter ((isnotnull(LAT#288) AND isnotnull(LON#289)) AND isnotnull(cast(regexp_extract(ZIPcode#290, (\d+), 1) as int)))
                     :                       +- FileScan csv [LAT#288,LON#289,ZIPcode#290] Batched: false, DataFilters: [isnotnull(LAT#288), isnotnull(LON#289), isnotnull(cast(regexp_extract(ZIPcode#290, (\d+), 1) as ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/revgecoding.csv], PartitionFilters: [], PushedFilters: [IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<LAT:double,LON:double,ZIPcode:string>
                     +- Sort [Zip Code#265 ASC NULLS FIRST], false, 0
                        +- Exchange hashpartitioning(Zip Code#265, 200), ENSURE_REQUIREMENTS, [plan_id=150]
                           +- Filter isnotnull(Zip Code#265)
                              +- TakeOrderedAndProject(limit=3, orderBy=[Estimated Median Income#304 DESC NULLS LAST], output=[Zip Code#265])
                                 +- Project [Zip Code#265, cast(regexp_replace(regexp_replace(Estimated Median Income#267, \$, , 1), ,, , 1) as int) AS Estimated Median Income#304]
                                    +- FileScan csv [Zip Code#265,Estimated Median Income#267] Batched: false, DataFilters: [], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/LA_income_2015.csv], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<Zip Code:int,Estimated Median Income:string>


+--------------------+-----+
|        Vict Descent|count|
+--------------------+-----+
|               White|  347|
|               Other|  110|
|Hispanic/Latin/Me...|   53|
|             Unknown|   32|
|               Black|   18|
|         Other Asian|   16|
+--------------------+-----+


Lowest 3
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#611L DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(count#611L DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=711]
      +- HashAggregate(keys=[Vict Descent#219], functions=[count(1)])
         +- Exchange hashpartitioning(Vict Descent#219, 200), ENSURE_REQUIREMENTS, [plan_id=708]
            +- HashAggregate(keys=[Vict Descent#219], functions=[partial_count(1)])
               +- Project [Vict Descent#219]
                  +- SortMergeJoin [ZIPcode#294], [Zip Code#265], Inner
                     :- Sort [ZIPcode#294 ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(ZIPcode#294, 200), ENSURE_REQUIREMENTS, [plan_id=700]
                     :     +- Project [Vict Descent#219, ZIPcode#294]
                     :        +- SortMergeJoin [knownfloatingpointnormalized(normalizenanandzero(LAT#43)), knownfloatingpointnormalized(normalizenanandzero(LON#44))], [knownfloatingpointnormalized(normalizenanandzero(LAT#288)), knownfloatingpointnormalized(normalizenanandzero(LON#289))], Inner
                     :           :- Sort [knownfloatingpointnormalized(normalizenanandzero(LAT#43)) ASC NULLS FIRST, knownfloatingpointnormalized(normalizenanandzero(LON#44)) ASC NULLS FIRST], false, 0
                     :           :  +- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#43)), knownfloatingpointnormalized(normalizenanandzero(LON#44)), 200), ENSURE_REQUIREMENTS, [plan_id=692]
                     :           :     +- Project [CASE WHEN (Vict Descent#30 = A) THEN Other Asian WHEN (Vict Descent#30 = B) THEN Black WHEN (Vict Descent#30 = C) THEN Chinese WHEN (Vict Descent#30 = D) THEN Cambodian WHEN (Vict Descent#30 = F) THEN Filipino WHEN (Vict Descent#30 = G) THEN Guamanian WHEN (Vict Descent#30 = H) THEN Hispanic/Latin/Mexican WHEN (Vict Descent#30 = I) THEN American Indian/Alaskan Native WHEN (Vict Descent#30 = J) THEN Japanese WHEN (Vict Descent#30 = K) THEN Korean WHEN (Vict Descent#30 = L) THEN Laotian WHEN (Vict Descent#30 = O) THEN Other WHEN (Vict Descent#30 = P) THEN Pacific Islander WHEN (Vict Descent#30 = S) THEN Samoan WHEN (Vict Descent#30 = U) THEN Hawaiian WHEN (Vict Descent#30 = V) THEN Vietnamese WHEN (Vict Descent#30 = W) THEN White WHEN (Vict Descent#30 = X) THEN Unknown WHEN (Vict Descent#30 = Z) THEN Asian Indian END AS Vict Descent#219, LAT#43, LON#44]
                     :           :        +- Filter ((((year(cast(gettimestamp(DATE OCC#19, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#30)) AND isnotnull(LAT#43)) AND isnotnull(LON#44))
                     :           :           +- FileScan csv [DATE OCC#19,Vict Descent#30,LAT#43,LON#44] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#19, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/Crime_Data_from_2010_to_2019.csv], PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DATE OCC:string,Vict Descent:string,LAT:double,LON:double>
                     :           +- Sort [knownfloatingpointnormalized(normalizenanandzero(LAT#288)) ASC NULLS FIRST, knownfloatingpointnormalized(normalizenanandzero(LON#289)) ASC NULLS FIRST], false, 0
                     :              +- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#288)), knownfloatingpointnormalized(normalizenanandzero(LON#289)), 200), ENSURE_REQUIREMENTS, [plan_id=693]
                     :                 +- Project [LAT#288, LON#289, cast(regexp_extract(ZIPcode#290, (\d+), 1) as int) AS ZIPcode#294]
                     :                    +- Filter ((isnotnull(LAT#288) AND isnotnull(LON#289)) AND isnotnull(cast(regexp_extract(ZIPcode#290, (\d+), 1) as int)))
                     :                       +- FileScan csv [LAT#288,LON#289,ZIPcode#290] Batched: false, DataFilters: [isnotnull(LAT#288), isnotnull(LON#289), isnotnull(cast(regexp_extract(ZIPcode#290, (\d+), 1) as ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/revgecoding.csv], PartitionFilters: [], PushedFilters: [IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<LAT:double,LON:double,ZIPcode:string>
                     +- Sort [Zip Code#265 ASC NULLS FIRST], false, 0
                        +- Exchange hashpartitioning(Zip Code#265, 200), ENSURE_REQUIREMENTS, [plan_id=701]
                           +- Filter isnotnull(Zip Code#265)
                              +- TakeOrderedAndProject(limit=3, orderBy=[Estimated Median Income#304 ASC NULLS FIRST], output=[Zip Code#265])
                                 +- Project [Zip Code#265, cast(regexp_replace(regexp_replace(Estimated Median Income#267, \$, , 1), ,, , 1) as int) AS Estimated Median Income#304]
                                    +- FileScan csv [Zip Code#265,Estimated Median Income#267] Batched: false, DataFilters: [], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/LA_income_2015.csv], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<Zip Code:int,Estimated Median Income:string>


+--------------------+-----+
|        Vict Descent|count|
+--------------------+-----+
|Hispanic/Latin/Me...| 1003|
|               Black|  333|
|               White|  272|
|               Other|  166|
|             Unknown|   44|
|         Other Asian|   30|
|              Korean|    4|
|American Indian/A...|    1|
|             Chinese|    1|
+--------------------+-----+

