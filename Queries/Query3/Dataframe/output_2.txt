vicitms alias df190439
incomde df107
rev geocoding df37781
rev geocoding zips df181
joined1190226
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- BroadcastHashJoin [knownfloatingpointnormalized(normalizenanandzero(LAT#43)), knownfloatingpointnormalized(normalizenanandzero(LON#44))], [knownfloatingpointnormalized(normalizenanandzero(LAT#341)), knownfloatingpointnormalized(normalizenanandzero(LON#342))], Inner, BuildRight, false
   :- Project [DR_NO#17, cast(gettimestamp(Date Rptd#18, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date) AS Date Rptd#73, cast(gettimestamp(DATE OCC#19, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date) AS DATE OCC#103, TIME OCC#20, AREA #21, AREA NAME#22, Rpt Dist No#23, Part 1-2#24, Crm Cd#25, Crm Cd Desc#26, Mocodes#27, Vict Age#28, Vict Sex#29, CASE WHEN (Vict Descent#30 = A) THEN Other Asian WHEN (Vict Descent#30 = B) THEN Black WHEN (Vict Descent#30 = C) THEN Chinese WHEN (Vict Descent#30 = D) THEN Cambodian WHEN (Vict Descent#30 = F) THEN Filipino WHEN (Vict Descent#30 = G) THEN Guamanian WHEN (Vict Descent#30 = H) THEN Hispanic/Latin/Mexican WHEN (Vict Descent#30 = I) THEN American Indian/Alaskan Native WHEN (Vict Descent#30 = J) THEN Japanese WHEN (Vict Descent#30 = K) THEN Korean WHEN (Vict Descent#30 = L) THEN Laotian WHEN (Vict Descent#30 = O) THEN Other WHEN (Vict Descent#30 = P) THEN Pacific Islander WHEN (Vict Descent#30 = S) THEN Samoan WHEN (Vict Descent#30 = U) THEN Hawaiian WHEN (Vict Descent#30 = V) THEN Vietnamese WHEN (Vict Descent#30 = W) THEN White WHEN (Vict Descent#30 = X) THEN Unknown WHEN (Vict Descent#30 = Z) THEN Asian Indian END AS Vict Descent#219, Premis Cd#31, Premis Desc#32, Weapon Used Cd#33, Weapon Desc#34, Status#35, Status Desc#36, Crm Cd 1#37, Crm Cd 2#38, Crm Cd 3#39, Crm Cd 4#40, ... 4 more fields]
   :  +- Filter ((((year(cast(gettimestamp(Date Rptd#18, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#30)) AND isnotnull(LAT#43)) AND isnotnull(LON#44))
   :     +- FileScan csv [DR_NO#17,Date Rptd#18,DATE OCC#19,TIME OCC#20,AREA #21,AREA NAME#22,Rpt Dist No#23,Part 1-2#24,Crm Cd#25,Crm Cd Desc#26,Mocodes#27,Vict Age#28,Vict Sex#29,Vict Descent#30,Premis Cd#31,Premis Desc#32,Weapon Used Cd#33,Weapon Desc#34,Status#35,Status Desc#36,Crm Cd 1#37,Crm Cd 2#38,Crm Cd 3#39,Crm Cd 4#40,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(Date Rptd#18, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens),..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/Crime_Data_from_2010_to_2019.csv], PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:int,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA :int,AREA NAME:string,Rpt Dis...
   +- BroadcastExchange HashedRelationBroadcastMode(List(knownfloatingpointnormalized(normalizenanandzero(input[0, double, true])), knownfloatingpointnormalized(normalizenanandzero(input[1, double, true]))),false), [plan_id=412]
      +- Project [LAT#341, LON#342, cast(regexp_extract(ZIPcode#343, (\d+), 1) as int) AS ZIPcode#347]
         +- Filter (isnotnull(LAT#341) AND isnotnull(LON#342))
            +- FileScan csv [LAT#341,LON#342,ZIPcode#343] Batched: false, DataFilters: [isnotnull(LAT#341), isnotnull(LON#342)], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/revgecoding.csv], PartitionFilters: [], PushedFilters: [IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<LAT:double,LON:double,ZIPcode:string>


Highest 3
+--------------------+-----+
|        Vict Descent|count|
+--------------------+-----+
|               White|  714|
|               Other|  297|
|Hispanic/Latin/Me...|  119|
|               Black|   37|
|             Unknown|   36|
|         Other Asian|   24|
|             Chinese|    1|
+--------------------+-----+

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#591L DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(count#591L DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=919]
      +- HashAggregate(keys=[Vict Descent#219], functions=[count(1)])
         +- Exchange hashpartitioning(Vict Descent#219, 200), ENSURE_REQUIREMENTS, [plan_id=916]
            +- HashAggregate(keys=[Vict Descent#219], functions=[partial_count(1)])
               +- Project [Vict Descent#219]
                  +- CartesianProduct (Zip Code#300 = ZIPcode#347)
                     :- Project [Vict Descent#219, ZIPcode#347]
                     :  +- BroadcastHashJoin [knownfloatingpointnormalized(normalizenanandzero(LAT#43)), knownfloatingpointnormalized(normalizenanandzero(LON#44))], [knownfloatingpointnormalized(normalizenanandzero(LAT#341)), knownfloatingpointnormalized(normalizenanandzero(LON#342))], Inner, BuildRight, false
                     :     :- Project [CASE WHEN (Vict Descent#30 = A) THEN Other Asian WHEN (Vict Descent#30 = B) THEN Black WHEN (Vict Descent#30 = C) THEN Chinese WHEN (Vict Descent#30 = D) THEN Cambodian WHEN (Vict Descent#30 = F) THEN Filipino WHEN (Vict Descent#30 = G) THEN Guamanian WHEN (Vict Descent#30 = H) THEN Hispanic/Latin/Mexican WHEN (Vict Descent#30 = I) THEN American Indian/Alaskan Native WHEN (Vict Descent#30 = J) THEN Japanese WHEN (Vict Descent#30 = K) THEN Korean WHEN (Vict Descent#30 = L) THEN Laotian WHEN (Vict Descent#30 = O) THEN Other WHEN (Vict Descent#30 = P) THEN Pacific Islander WHEN (Vict Descent#30 = S) THEN Samoan WHEN (Vict Descent#30 = U) THEN Hawaiian WHEN (Vict Descent#30 = V) THEN Vietnamese WHEN (Vict Descent#30 = W) THEN White WHEN (Vict Descent#30 = X) THEN Unknown WHEN (Vict Descent#30 = Z) THEN Asian Indian END AS Vict Descent#219, LAT#43, LON#44]
                     :     :  +- Filter ((((year(cast(gettimestamp(Date Rptd#18, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#30)) AND isnotnull(LAT#43)) AND isnotnull(LON#44))
                     :     :     +- FileScan csv [Date Rptd#18,Vict Descent#30,LAT#43,LON#44] Batched: false, DataFilters: [(year(cast(gettimestamp(Date Rptd#18, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens),..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/Crime_Data_from_2010_to_2019.csv], PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<Date Rptd:string,Vict Descent:string,LAT:double,LON:double>
                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(knownfloatingpointnormalized(normalizenanandzero(input[0, double, true])), knownfloatingpointnormalized(normalizenanandzero(input[1, double, true]))),false), [plan_id=902]
                     :        +- Project [LAT#341, LON#342, cast(regexp_extract(ZIPcode#343, (\d+), 1) as int) AS ZIPcode#347]
                     :           +- Filter ((isnotnull(LAT#341) AND isnotnull(LON#342)) AND isnotnull(cast(regexp_extract(ZIPcode#343, (\d+), 1) as int)))
                     :              +- FileScan csv [LAT#341,LON#342,ZIPcode#343] Batched: false, DataFilters: [isnotnull(LAT#341), isnotnull(LON#342), isnotnull(cast(regexp_extract(ZIPcode#343, (\d+), 1) as ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/revgecoding.csv], PartitionFilters: [], PushedFilters: [IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<LAT:double,LON:double,ZIPcode:string>
                     +- TakeOrderedAndProject(limit=3, orderBy=[Estimated Median Income#311 DESC NULLS LAST], output=[Zip Code#300])
                        +- Project [Zip Code#300, Estimated Median Income#311]
                           +- BroadcastHashJoin [Zip Code#300], [ZIPcode#483], Inner, BuildLeft, false
                              :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=908]
                              :  +- Project [Zip Code#300, cast(regexp_replace(regexp_replace(Estimated Median Income#302, \$, , 1), ,, , 1) as int) AS Estimated Median Income#311]
                              :     +- Filter ((isnotnull(Community#301) AND Contains(Community#301, Los Angeles)) AND isnotnull(Zip Code#300))
                              :        +- FileScan csv [Zip Code#300,Community#301,Estimated Median Income#302] Batched: false, DataFilters: [isnotnull(Community#301), Contains(Community#301, Los Angeles), isnotnull(Zip Code#300)], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/LA_income_2015.csv], PartitionFilters: [], PushedFilters: [IsNotNull(Community), StringContains(Community,Los Angeles), IsNotNull(Zip Code)], ReadSchema: struct<Zip Code:int,Community:string,Estimated Median Income:string>
                              +- HashAggregate(keys=[ZIPcode#483], functions=[])
                                 +- Exchange hashpartitioning(ZIPcode#483, 200), ENSURE_REQUIREMENTS, [plan_id=905]
                                    +- HashAggregate(keys=[ZIPcode#483], functions=[])
                                       +- Project [cast(regexp_extract(ZIPcode#482, (\d+), 1) as int) AS ZIPcode#483]
                                          +- Filter isnotnull(cast(regexp_extract(ZIPcode#482, (\d+), 1) as int))
                                             +- FileScan csv [ZIPcode#482] Batched: false, DataFilters: [isnotnull(cast(regexp_extract(ZIPcode#482, (\d+), 1) as int))], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://master-42:54310/user/user/revgecoding.csv], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ZIPcode:string>


